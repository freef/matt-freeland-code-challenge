let cors,bodyParser,express,models,sequelize,routes;_a88‍.w("dotenv/config");_a88‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_a88‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_a88‍.w("express",[["default",["express"],function(v){express=v}]]);_a88‍.w("./models",[["default",["models"],function(v){models=v}],["sequelize",["sequelize"],function(v){sequelize=v}]]);_a88‍.w("./routes",[["default",["routes"],function(v){routes=v}]]);







const app = express();

// Application-Level Middleware

app.use(cors());

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(async (req, res, next) => {
  req.context = {
    models,
    me: await models.User.findById('1'),
  };
  next();
});

// Routes
app.use('/users', routes.user);
app.use('/messages', routes.message);

// Start

const eraseDatabaseOnSync = true;

sequelize.sync({ force: eraseDatabaseOnSync }).then(async () => {
  if (eraseDatabaseOnSync) {
    createUsersWithMessages();
  }

  app.listen(process.env.PORT, () =>
    console.log(`Example app listening on port ${process.env.PORT}!`),
  );
});
